package com.biser.biser;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.SortedMap;

/**
 * Sorts color.
 * 
 * It loads the file that contains sequence of colors on the stand and creates another file
 * each line of which contain bead color and its location on the stand. The lines of the 
 * output file are ordered according to bead color. 
 * @author Andrea
 *
 */
public class BeadSorter {
	/**
	 * "handler" for buffer reader
	 */
	private BufferedReader _br;
	
	/**
	 * Current ordered content 
	 */
	private SortedMap<String, String> _orderedContent;
	
	public BufferedReader get_br() {
		return _br;
	}

	public BeadSorter(String fileName){
	    try {
			FileReader fr = new FileReader(fileName);
			this._br = new BufferedReader(fr);
	    } catch (FileNotFoundException e){
	    	//System.err.println(e.getMessage());
	    	this._br = null;
	    } 
	}
	
	
	public String nextLine(){
		String line;
		try {
			line = this.get_br().readLine();
		} catch (IOException e){
			//System.err.println(e.getMessage());
			line = null;
		}
		return line;
 	}
	
	public void insertIntoHash(){
		String line = this.nextLine();
		String currentMarker = null;
		Integer currentRow = 1;
		Integer pointer, rowLen;
		String[] colors;
		String key, value;
		while (line != null){
			line = line.trim();
			if (line.equals("")){
				continue;
			}
			if (line.matches("\".*\"")){
				currentMarker = line;
				currentRow = 1;
				continue;
			}
			colors = line.split("\\s+");
			rowLen = colors.length;
			for (pointer = 0; pointer < rowLen; pointer++){
				key = colors[pointer];
				value = currentMarker + Integer.toString(pointer+1) + " " + Integer.toString(currentRow);
				this._orderedContent.put(key, value);
			}
			currentRow++;
		};
	}
	
	public String toString(){
		return this._toStringLocal(_orderedContent, "");
	}
	
	private String _toStringLocal(SortedMap<String, String> m, String acc){
		if (m.isEmpty()){
			return acc;
		}
		String headKey = m.firstKey(), 
			   headValue = m.get(headKey);
		return this._toStringLocal(m.tailMap(headKey), headValue + acc);
	}

}
